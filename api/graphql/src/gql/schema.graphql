type Composition {
  token: Token!
  value: String!
  valueUSD: String!
}

type BridgeSide {
  id: String!
  contractAddress: String!
  chainId: Int!
  typedChainId: String!

  volumeUSD: String!

  composition: [Composition!]!
  maxDepositAmount: String!
  minDepositAmount: String!

  averageDepositAmount: String!
  averageWithdrawAmount: String!
  token: String!

  numberOfDeposits: Int!
  numberOfWithdraws: Int!
}

type Bridge {
  id: String!
  sides: [BridgeSide!]!

  volumeUSD: String!
}

type Token {
  id: String!
  address: String!
  isFungibleTokenWrapper: Boolean!
  name: String!
  symbol: String!
  decimals: Int!
}

type BrideSideDayData {
  # <Day index>
  id: String!
  date: String!

  #  brideSide:BrBridgeSide
  compositions: [Composition!]!

  numberOfDeposits: String!
  numberOfWithdraws: String!
  numberOfTransfers: String!

  fees: String!
  volumeUSD: String!
}

type DayData {
  # <Day index>
  id: String!
  date: String!

  compositions: [Composition!]!

  numberOfDeposits: Int!
  numberOfWithdraws: Int!
  numberOfTransfers: Int!

  feesUSD: String!
  volumeUSD: String!
}

type DepositTx {
  id: String!
  depositor: String!
  # deposit amount
  value: String! # uint256
  isWrapAndDeposit: Boolean!
  wrappingFee: String!
  RelayerFee: String!
  fullFee: String!
  gasUsed: String!
  finalValue: String! # value without fees
  blockTimestamp: String!
  transactionHash: String!

  bridgeSide: BridgeSide!
  wrappedToken: Token!

  blockNumber: String!
}

type WithdrawTx {
  id: String!
  beneficiary: String!
  # deposit amount
  value: String! # uint256
  gasUsed: String!

  isUnwrapAndWithdraw: Boolean!
  unWrappingFee: String!
  RelayerFee: String!
  fullFee: String!

  finalValue: String! # value without fees
  blockTimestamp: String!
  transactionHash: String!

  bridgeSide: BridgeSide!
  wrappedToken: Token!

  blockNumber: String!
}

type TransferTx {
  id: String!
  from: String! # addresss
  fee: String!

  blockNumber: String!
  blockTimestamp: String!
  transactionHash: String!
  contractAddress: String!
}

type Network {
  name:String!
}

type Query {
  bridges: [Bridge!]!
  bridgeSides: [BridgeSide!]!
  bridgesDayData: [DayData!]!
  bridgeDayData(bridgeId: String!): DayData!
  networks:[Network!]!
  depositTransactions(network:String!): [DepositTx!]!
  withdrawTransactions(network:String!): [WithdrawTx!]!
}
