type EdgeAddition @entity(immutable: true) {
  id: ID!
  chainID: BigInt! # uint256
  latestLeafIndex: BigInt! # uint256
  merkleRoot: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EdgeUpdate @entity(immutable: true) {
  id: ID!
  chainID: BigInt! # uint256
  latestLeafIndex: BigInt! # uint256
  merkleRoot: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Insertion @entity(immutable: true) {
  id: ID!
  commitment: BigInt! # uint256
  leafIndex: BigInt! # uint32
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewCommitment @entity(immutable: true) {
  id: Bytes!
  commitment: BigInt! # uint256
  subTreeIndex: BigInt! # uint256
  leafIndex: BigInt! # uint256
  encryptedOutput: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewNullifier @entity(immutable: true) {
  id: ID!
  nullifier: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PublicKey @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  key: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferTx @entity(immutable: true) {
  id: ID!
  from: Bytes! # addresss
  to: Bytes! # address
  value: BigInt! # uint256
  finalValue: BigInt! # value without fees
  fee: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  contractAddress: Bytes!
}

type DepositTx @entity(immutable: true) {
  id: ID!
  depositor: Bytes!
  # deposit amount
  value: BigInt! # uint256

  isWrapAndDeposit:Boolean!
  wrappingFee:BigInt!
  RelayerFee:BigInt!
  fullFee: BigInt!

  finalValue: BigInt! # value without fees

  blockTimestamp: BigInt!
  transactionHash: Bytes!

  vAnchorAddress: Bytes!
  fungibleTokenWrapper: Bytes!
  blockNumber: BigInt!
}

type WithdrawTx @entity(immutable: true) {
  id: ID!
  beneficiary: Bytes!
  # deposit amount
  value: BigInt! # uint256

  isUnwrapAndWithdraw:Boolean!
  unWrappingFee:BigInt!
  RelayerFee:BigInt!
  fullFee: BigInt!


  finalValue: BigInt! # value without fees
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  vAnchorAddress: Bytes!
  fungibleTokenWrapper: Bytes!

  blockNumber: BigInt!
}

type VAnchor @entity(immutable: false) {
  id: ID!
  chainId: BigInt!
  contractAddress: Bytes!
  valueLocked: BigInt!
  finalValueLocked: BigInt!

  maxDepositAmount:BigInt!
  minDepositAmount:BigInt!
  numberOfDeposits:BigInt!
  averageDepositAmount:BigInt!

  maxWithdrawAmount:BigInt!
  minWithdrawAmount:BigInt!
  numberOfWithdraws:BigInt!
  averageWithdrawAmount:BigInt!

  totalFees: BigInt!
}

type VAnchorDayData @entity(immutable: false) {
  # <Day index>-<vAnchorAddress>
  id: ID!
  date: Int!

  vAnchor: VAnchor!
  fees: BigInt!
  volume: BigInt!
  numberOfDeposits: BigInt!
  depositTx: [DepositTx!]!

  startBlockNumber: BigInt!
}
type Deploy @entity(immutable: true) {
  id: ID!
  addr: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity(immutable: false) {
  id: Bytes!
  address:Bytes!
}
type FungibleTokenWrapper @entity(immutable: false) {
  id: Bytes!
  name:String!
  address:Bytes!
  symbol:String!
  tokens:[Token!]!
  decimals:Int!
  feePercentage:Int!
}
